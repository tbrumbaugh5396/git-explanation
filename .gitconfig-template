[user]
  name = Tom Brumbaugh
  email = thomas.william.brumbaugh@gmail.com
  username = tbrumbaugh5396
[init]
  defaultBranch = master
[alias]
list-settings = git config --list
check-variable = git config # needs to add a key-value
where-does-variable-come-from = git config --show-origin                  # needs to add a key-value
get-all-git-commands = git help -a
config-for-entire-computer = config --system -e
config-for-user = config --global -e
config-for-local-repository = config --local -e

# making or cloning git repositories
make-directory-a-repository = init
clone-a-remote-repository = clone

# operations around working tree, staging areas, and commits
add-from-working-tree-to-staging-area = add
commit-directly-from-working-tree = commit -a
remove-file-from-tracking = rm
remove-file-from-staging-area = rm --cached
amend-file-to-previous-commit = commit --amend
unstage-file = reset HEAD                                                  # or unstage or restore --staged
unmodify-file = checkout --                                                # or restore

# differences
difference-between-staging-area-and-last-commit = git diff --staged        # this is equivalent to git diff --cached
difference-between-working-area-and-last-commit = git diff

# commit history
view-commit-history = log
view-commit-history-with-patches = log --patch # or log -p
# there are more logging information that can be added.

# remote repository related
view-remote-repositories = remote
view-remote-repositories-and-their-URLs = remote -v
update-all-information-from-remote-repositories = fetch                    # with <remote-repository-name>
add-remote-repositories = remote add                                       # with <remote-repository-name> <URL>
view-remote-repository-information = remote show                           # with <remote-repository-name>
rename-remote-repository = remote rename                                   # with <old-remote-repository-name> <new-remote-repository-name>
remove-remote-repository = remote remove # or remote rm                    # with <remote-repository-name>
push-branch-to-remote-repository = push

# tag related
view-tags = tag # or tag -l or tag --list
view-tags-matching-pattern = tag -l                                        # with <tag-pattern>
view-commit-associated-with-tag = show                                     # with <tag-name>
add-lightweight-tag = tag                                                  # with <tag-name>
add-annotated-tag = tag -a                                                 # with <tag-name> <commit-checksum>
push-tag-to-remote-repository = push                                       # with <remote-repository-name> <tag-name>
push-all-tags-to-remote-repository = "!git push \"$1\"^ --tags #"          # with <remote-repository-name>
delete-tag = tag -d                                                        # with <tag-name>
delete-tag-from-remote-repository = "!git push \"$1\"^ --delete \"$2\"^ #" # with <remote-repository-name> <tag-name>   

# checkout
put-the-commit-the-tag-points-to-into-working-tree = checkout                         # with <tag-name>
put-the-commit-the-branch-points-to-into-the-working-tree = checkout                  # with <branch-name> or switch
create-a-new-branch-and-switch-to-it = checkout -b                                    # with <branch-name>
put-the-commit-the-tag-points-to-into-working-tree-and-make-it-a-branch = checkout -b # with <branch-name> <tag-name>

# branch related
create-new-branch = branch                                                 # with <branch-name>
view-all-branches = branch --all
delete-branch = branch -d
force-delete-branch = branch -D
rename-branch = branch --move  
view-all-merged-branches-with-our-current-branch = branch --merged
view-all-non-merged-branches-with-our-current-branch = branch --no-merged
show-corrected-branch-on-remote-repository = "!git push --set-upstream \"$1\"^ --delete \"$2\"^ #"
delete-branch-on-remote-repository = "!git push \"$1\"^ --delete \"$2\"^ #" # with <remote-repository-name> <branch-name>

# remote reference
show-remote-repository-references = ls-remote
update-all-remote-repositories = fetch --all
view-all-up-to-date-branches = git fetch --all; git branch -vv

# track branch
track-remote-repository-branch-with-current-branch = "!git checkout --track \"$1\"^/\"$2\"^ #"

########### Checkout https://gist.github.com/pksunkara/988716 for more .gitconfig settings #[core]
## editor = nvim
## whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
## pager = delta
##[sendemail]
## smtpencryption = tls
## smtpserver = smtp.gmail.com
# smtpuser = pavan.sss1991@gmail.com
# smtppass = password
# smtpserverport = 587
#[web]
# browser = google-chrome
#[instaweb]
# httpd = apache2 -f
#[rerere]
# enabled = 1
# autoupdate = 1
#[color]
# ui = auto
#[color "branch"]
# current = yellow bold
# local = green bold
# remote = cyan bold
#[color "diff"]
# meta = yellow bold
# frag = magenta bold
# old = red bold
# new = green bold
# whitespace = red reverse
#[color "status"]
# added = green bold
# changed = yellow bold
# untracked = red bold
#[diff]
# tool = vimdiff
#[difftool]
# prompt = false
#[delta]
# features = line-numbers decorations
# line-numbers = true
#[delta "decorations"]
# minus-style = red bold normal
# plus-style = green bold normal
# minus-emph-style = white bold red
# minus-non-emph-style = red bold normal
# plus-emph-style = white bold green
# plus-non-emph-style = green bold normal
# file-style = yellow bold none
# file-decoration-style = yellow box
# hunk-header-style = magenta bold
# hunk-header-decoration-style = magenta box
# minus-empty-line-marker-style = normal normal
# plus-empty-line-marker-style = normal normal
# line-numbers-right-format = "{np:^4}â”‚ "
#[github]
# user = pksunkara
# token = token
#[gitflow "prefix"]
# versiontag = v
#[sequence]
# editor = interactive-rebase-tool
#[alias]
# a = add --all
# ai = add -i
# #############
# ap = apply
# as = apply --stat
# ac = apply --check
# #############
# ama = am --abort
# amr = am --resolved
# ams = am --skip
# #############
# b = branch
# ba = branch -a
# bd = branch -d
# bdd = branch -D
# br = branch -r
# bc = rev-parse --abbrev-ref HEAD
# bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"
# bs = !git-branch-status
# #############
# c = commit
# ca = commit -a
# cm = commit -m
# cam = commit -am
# cem = commit --allow-empty -m
# cd = commit --amend
# cad = commit -a --amend
# ced = commit --allow-empty --amend
# #############
# cl = clone
# cld = clone --depth 1
# clg = !sh -c 'git clone https://github.com/$1 $(basename $1)' -
# clgp = !sh -c 'git clone git@github.com:$1 $(basename $1)' -
# clgu = !sh -c 'git clone git@github.com:$(git config --get user.username)/$1 $1' -
# #############
# cp = cherry-pick
# cpa = cherry-pick --abort
# cpc = cherry-pick --continue
# #############
# d = diff
# dp = diff --patience
# dc = diff --cached
# dk = diff --check
# dck = diff --cached --check
# dt = difftool
# dct = difftool --cached
# #############
# f = fetch
# fo = fetch origin
# fu = fetch upstream
# #############
# fp = format-patch
# #############
# fk = fsck
# #############
# g = grep -p
# #############
# l = log --oneline
# lg = log --oneline --graph --decorate
# #############
# ls = ls-files
# lsf = !git ls-files | grep -i
# #############
# m = merge
# ma = merge --abort
# mc = merge --continue
# ms = merge --skip
# #############
# o = checkout
# om = checkout master
# ob = checkout -b
# opr = !sh -c 'git fo pull/$1/head:pr-$1 && git o pr-$1'
# #############
# pr = prune -v
# #############
# ps = push
# psf = push -f
# psu = push -u
# pst = push --tags
# #############
# pso = push origin
# psao = push --all origin
# psfo = push -f origin
# psuo = push -u origin
# #############
# psom = push origin master
# psaom = push --all origin master
# psfom = push -f origin master
# psuom = push -u origin master
# psoc = !git push origin $(git bc)
# psaoc = !git push --all origin $(git bc)
# psfoc = !git push -f origin $(git bc)
# psuoc = !git push -u origin $(git bc)
# psdc = !git push origin :$(git bc)
# #############
# pl = pull
# pb = pull --rebase
# #############
# plo = pull origin
# pbo = pull --rebase origin
# plom = pull origin master
# ploc = !git pull origin $(git bc)
# pbom = pull --rebase origin master
# pboc = !git pull --rebase origin $(git bc)
# #############
# plu = pull upstream
# plum = pull upstream master
# pluc = !git pull upstream $(git bc)
# pbum = pull --rebase upstream master
# pbuc = !git pull --rebase upstream $(git bc)
# #############
# rb = rebase
# rba = rebase --abort
# rbc = rebase --continue
# rbi = rebase --interactive
# rbs = rebase --skip
# #############
# re = reset
# rh = reset HEAD
# reh = reset --hard
# rem = reset --mixed
# res = reset --soft
# rehh = reset --hard HEAD
# remh = reset --mixed HEAD
# resh = reset --soft HEAD
# rehom = reset --hard origin/master
# #############
# r = remote
# ra = remote add
# rr = remote rm
# rv = remote -v
# rn = remote rename
# rp = remote prune
# rs = remote show
# rao = remote add origin
# rau = remote add upstream
# rro = remote remove origin
# rru = remote remove upstream
# rso = remote show origin
# rsu = remote show upstream
# rpo = remote prune origin
# rpu = remote prune upstream
# #############
# rmf = rm -f
# rmrf = rm -r -f
# #############
# s = status
# sb = status -s -b
# #############
# sa = stash apply
# sc = stash clear
# sd = stash drop
# sl = stash list
# sp = stash pop
# ss = stash save
# ssk = stash save -k
# sw = stash show
# st = !git stash list | wc -l 2>/dev/null | grep -oEi '#[0-9]#[0-9]*'
# #############
# t = tag
# td = tag -d
# #############
# w = show
# wp = show -p
# wr = show -p --no-color
# #############
# svnr = svn rebase
# svnd = svn dcommit
# svnl = svn log --oneline --show-commit
# #############
# subadd = !sh -c 'git submodule add git://github.com/$1 $2/$(basename $1)' -
# subrm = !sh -c 'git submodule deinit -f -- $1 && rm -rf .git/modules/$1 && git rm -f $1' -
# subup = submodule update --init --recursive
# subpull = submodule foreach 'git pull --tags -f origin master || git pull --tags -f origin main'
# #############
# assume = update-index --assume-unchanged
# unassume = update-index --no-assume-unchanged
# assumed = !git ls -v | grep ^h | cut -c 3-
# unassumeall = !git assumed | xargs git unassume
# assumeall = !git status -s | awk {'print $2'} | xargs git assume
# #############
# bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' -
# release = !sh -c 'git tag v$1 && git pst' -
# unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' -
# merged = !sh -c 'git o master && git plom && git bd $1 && git rpo' -
# aliases = !git config -l | grep alias | cut -c 7-
# snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
# bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
# whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' -
# serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
# #############
# behind = !git rev-list --left-only --count $(git bu)...HEAD
# ahead = !git rev-list --right-only --count $(git bu)...HEAD
# #############
# ours = "!f() { git checkout --ours $@ && git add $@; }; f"
# theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
# subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' -
# human = name-rev --name-only --refs=refs/heads/*
#[filter "lfs"]
# clean = git-lfs clean -- %f
# smudge = git-lfs smudge -- %f
# process = git-lfs filter-process
# required = true
